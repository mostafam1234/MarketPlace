// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(MarketPlaceContext))]
    [Migration("20250813112435_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tAmazonAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text");

                    b.Property<int>("MarketPlaceTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("RoleArn")
                        .HasColumnType("text");

                    b.Property<string>("SellerId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MarketPlaceTypeId");

                    b.ToTable("AmazonAccounts");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tAttribute", b =>
                {
                    b.Property<int>("kAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kAttributeId"));

                    b.Property<int?>("kAttributeGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("sName")
                        .HasColumnType("text");

                    b.HasKey("kAttributeId");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tAttributeGroup", b =>
                {
                    b.Property<int>("kAttributeGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kAttributeGroupId"));

                    b.Property<string>("sGroupName")
                        .HasColumnType("text");

                    b.HasKey("kAttributeGroupId");

                    b.ToTable("AttributeGroups");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tAttributeValue", b =>
                {
                    b.Property<int>("kAttributeValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kAttributeValueId"));

                    b.Property<bool?>("bValue")
                        .HasColumnType("boolean");

                    b.Property<double?>("dValue")
                        .HasColumnType("double precision");

                    b.Property<int?>("iValue")
                        .HasColumnType("integer");

                    b.Property<int>("kAttribueId")
                        .HasColumnType("integer");

                    b.Property<string>("sValue")
                        .HasColumnType("text");

                    b.Property<string>("sValueList")
                        .HasColumnType("text");

                    b.Property<int?>("tAttributekAttributeId")
                        .HasColumnType("integer");

                    b.HasKey("kAttributeValueId");

                    b.HasIndex("kAttribueId");

                    b.HasIndex("tAttributekAttributeId");

                    b.ToTable("AttributeValues");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tCondition", b =>
                {
                    b.Property<int>("kConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kConditionId"));

                    b.Property<string>("sConditionName")
                        .HasColumnType("text");

                    b.HasKey("kConditionId");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tCustomer", b =>
                {
                    b.Property<int>("kCustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kCustomerId"));

                    b.Property<string>("CustomerName")
                        .HasColumnType("text");

                    b.Property<int?>("OdooId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("dBirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("kCustomerGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("kMarketplaceAccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("kMarketplaceId")
                        .HasColumnType("integer");

                    b.Property<int?>("kOdooReference")
                        .HasColumnType("integer");

                    b.Property<string>("sCustomerNumber")
                        .HasColumnType("text");

                    b.Property<string>("sMarketplaceAccountName")
                        .HasColumnType("text");

                    b.HasKey("kCustomerId");

                    b.HasIndex("kCustomerGroupId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tCustomerAddress", b =>
                {
                    b.Property<int>("kCustomerAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kCustomerAddressId"));

                    b.Property<int?>("iAddressType")
                        .HasColumnType("integer");

                    b.Property<int?>("kCustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("sAddressAddition")
                        .HasColumnType("text");

                    b.Property<string>("sCity")
                        .HasColumnType("text");

                    b.Property<string>("sCompanyAddition")
                        .HasColumnType("text");

                    b.Property<string>("sCompanyName")
                        .HasColumnType("text");

                    b.Property<string>("sCountry")
                        .HasColumnType("text");

                    b.Property<string>("sEmailAddress")
                        .HasColumnType("text");

                    b.Property<string>("sFaxNumber")
                        .HasColumnType("text");

                    b.Property<string>("sForename")
                        .HasColumnType("text");

                    b.Property<string>("sMobilePhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("sPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("sSalutation")
                        .HasColumnType("text");

                    b.Property<string>("sState")
                        .HasColumnType("text");

                    b.Property<string>("sStreetAndHousenumber")
                        .HasColumnType("text");

                    b.Property<string>("sSurname")
                        .HasColumnType("text");

                    b.Property<string>("sTitle")
                        .HasColumnType("text");

                    b.Property<string>("sWebsite")
                        .HasColumnType("text");

                    b.Property<string>("sZipCode")
                        .HasColumnType("text");

                    b.HasKey("kCustomerAddressId");

                    b.HasIndex("kCustomerId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tCustomerGroup", b =>
                {
                    b.Property<int>("kCustomerGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kCustomerGroupId"));

                    b.Property<string>("sName")
                        .HasColumnType("text");

                    b.HasKey("kCustomerGroupId");

                    b.ToTable("CustomerGroups");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tEbayAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("AccessTokenExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Environment")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<TimeOnly?>("LastSyncOrders")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("LastSyncProducts")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("LastSyncShipments")
                        .HasColumnType("time without time zone");

                    b.Property<int>("MarketplaceTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("RefreshTokenExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeOnly?>("TokenExpiry")
                        .HasColumnType("time without time zone");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MarketplaceTypeId");

                    b.ToTable("EbayAccounts");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tKauflandAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MarketPlaceTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MarketPlaceTypeId");

                    b.ToTable("KauflandAccounts");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tLanguage", b =>
                {
                    b.Property<int>("kLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kLanguageId"));

                    b.Property<string>("sIsoCode")
                        .HasColumnType("text");

                    b.Property<string>("sName")
                        .HasColumnType("text");

                    b.HasKey("kLanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tLogEntry", b =>
                {
                    b.Property<int?>("kLogLevelId")
                        .HasColumnType("integer");

                    b.Property<int?>("kLogTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("dTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("sMessage")
                        .HasColumnType("text");

                    b.HasKey("kLogLevelId", "kLogTypeId");

                    b.HasIndex("kLogLevelId")
                        .IsUnique();

                    b.HasIndex("kLogTypeId")
                        .IsUnique();

                    b.ToTable("LogEntries");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tLogLevel", b =>
                {
                    b.Property<int>("kLogLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kLogLevelId"));

                    b.Property<string>("sName")
                        .HasColumnType("text");

                    b.HasKey("kLogLevelId");

                    b.ToTable("LogLevels");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tLogType", b =>
                {
                    b.Property<int>("kLogTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kLogTypeId"));

                    b.Property<string>("sName")
                        .HasColumnType("text");

                    b.HasKey("kLogTypeId");

                    b.ToTable("LogTypes");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tManufacturer", b =>
                {
                    b.Property<int>("kManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kManufacturerId"));

                    b.Property<string>("sAddress")
                        .HasColumnType("text");

                    b.Property<string>("sContactPerson")
                        .HasColumnType("text");

                    b.Property<string>("sName")
                        .HasColumnType("text");

                    b.HasKey("kManufacturerId");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tMarketplaceType", b =>
                {
                    b.Property<int>("kMarketplaceType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kMarketplaceType"));

                    b.Property<string>("sName")
                        .HasColumnType("text");

                    b.HasKey("kMarketplaceType");

                    b.ToTable("MarketplaceTypes");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tOdooAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("DataBaseName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<bool?>("SyncCustomers")
                        .HasColumnType("boolean");

                    b.Property<bool?>("SyncOrders")
                        .HasColumnType("boolean");

                    b.Property<bool?>("SyncProducts")
                        .HasColumnType("boolean");

                    b.Property<bool?>("SyncSuppliers")
                        .HasColumnType("boolean");

                    b.Property<string>("URL")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<int>("kMarketplaceTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("kMarketplaceTypeId");

                    b.ToTable("OdooAccounts");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tOrder", b =>
                {
                    b.Property<int>("kOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kOrderId"));

                    b.Property<int?>("OrderResponseStatus")
                        .HasColumnType("integer");

                    b.Property<string>("OrdersEdiMessage")
                        .HasColumnType("text");

                    b.Property<DateTime?>("dCreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("dShippingTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("iOrderStatus")
                        .HasColumnType("integer");

                    b.Property<int>("kCustomerId")
                        .HasColumnType("integer");

                    b.Property<int?>("kMarketplaceAccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("kMarketplaceId")
                        .HasColumnType("integer");

                    b.Property<int?>("kOdooReference")
                        .HasColumnType("integer");

                    b.Property<int?>("kOrderAddressId")
                        .HasColumnType("integer");

                    b.Property<int?>("kPaymentMethodId")
                        .HasColumnType("integer");

                    b.Property<string>("sCustomerHint")
                        .HasColumnType("text");

                    b.Property<string>("sInternalHint")
                        .HasColumnType("text");

                    b.Property<string>("sOrderNumber")
                        .HasColumnType("text");

                    b.HasKey("kOrderId");

                    b.HasIndex("kCustomerId");

                    b.HasIndex("kOrderAddressId");

                    b.HasIndex("kPaymentMethodId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tOrderPosition", b =>
                {
                    b.Property<int>("kOrderPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kOrderPositionId"));

                    b.Property<double?>("dNetPrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("dVat")
                        .HasColumnType("double precision");

                    b.Property<int?>("iOrderPositionType")
                        .HasColumnType("integer");

                    b.Property<int?>("iQuantity")
                        .HasColumnType("integer");

                    b.Property<int?>("iQuantityShipped")
                        .HasColumnType("integer");

                    b.Property<int>("kOrderId")
                        .HasColumnType("integer");

                    b.Property<int>("kVariantId")
                        .HasColumnType("integer");

                    b.Property<string>("sName")
                        .HasColumnType("text");

                    b.Property<string>("sPositionHint")
                        .HasColumnType("text");

                    b.Property<int?>("tOrderkOrderId")
                        .HasColumnType("integer");

                    b.HasKey("kOrderPositionId");

                    b.HasIndex("kOrderId");

                    b.HasIndex("kVariantId");

                    b.HasIndex("tOrderkOrderId");

                    b.ToTable("OrderPositions");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tOttoAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .HasColumnType("text");

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("ClientEmail")
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastSyncOrders")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastSyncProducts")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastSyncShipments")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("kMarketplaceId")
                        .HasColumnType("integer");

                    b.Property<int?>("tMarketplaceTypekMarketplaceType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("kMarketplaceId");

                    b.HasIndex("tMarketplaceTypekMarketplaceType");

                    b.ToTable("OttoAccounts");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tPaymentMethod", b =>
                {
                    b.Property<int>("kPaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kPaymentMethodId"));

                    b.Property<string>("sName")
                        .HasColumnType("text");

                    b.HasKey("kPaymentMethodId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tProduct", b =>
                {
                    b.Property<int>("kProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kProductId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<bool?>("bAvailableInOdoo")
                        .HasColumnType("boolean");

                    b.Property<bool?>("bEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool?>("bStockEnabled")
                        .HasColumnType("boolean");

                    b.Property<double?>("dLength")
                        .HasColumnType("double precision");

                    b.Property<double?>("dNetprice")
                        .HasColumnType("double precision");

                    b.Property<double?>("dPackedWeight")
                        .HasColumnType("double precision");

                    b.Property<double?>("dWeight")
                        .HasColumnType("double precision");

                    b.Property<double?>("dWidth")
                        .HasColumnType("double precision");

                    b.Property<int?>("iHandlingTime")
                        .HasColumnType("integer");

                    b.Property<int?>("kConditionId")
                        .HasColumnType("integer");

                    b.Property<int?>("kManufacturerId")
                        .HasColumnType("integer");

                    b.Property<int>("kMarketplaceAccountId")
                        .HasColumnType("integer");

                    b.Property<int>("kMarketplaceId")
                        .HasColumnType("integer");

                    b.Property<int?>("kOdooReference")
                        .HasColumnType("integer");

                    b.Property<string>("kProductCode")
                        .HasColumnType("text");

                    b.Property<int?>("kResponsiblePersonGPSRId")
                        .HasColumnType("integer");

                    b.Property<int?>("kSalesChannelProductMappingId")
                        .HasColumnType("integer");

                    b.Property<int?>("kSupplierId")
                        .HasColumnType("integer");

                    b.Property<int?>("kVatTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("sASIN")
                        .HasColumnType("text");

                    b.Property<string>("sGTIN")
                        .HasColumnType("text");

                    b.Property<string>("sISBN")
                        .HasColumnType("text");

                    b.Property<string>("sMPN")
                        .HasColumnType("text");

                    b.Property<string>("sName")
                        .HasColumnType("text");

                    b.Property<string>("sOriginCountry")
                        .HasColumnType("text");

                    b.Property<string>("sSku")
                        .HasColumnType("text");

                    b.Property<string>("sTaricCode")
                        .HasColumnType("text");

                    b.Property<string>("sUPC")
                        .HasColumnType("text");

                    b.Property<int?>("tConditionkConditionId")
                        .HasColumnType("integer");

                    b.Property<int?>("tManufacturerkManufacturerId")
                        .HasColumnType("integer");

                    b.HasKey("kProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("kConditionId");

                    b.HasIndex("kManufacturerId");

                    b.HasIndex("kResponsiblePersonGPSRId");

                    b.HasIndex("kSalesChannelProductMappingId");

                    b.HasIndex("kSupplierId");

                    b.HasIndex("kVatTypeId");

                    b.HasIndex("tConditionkConditionId");

                    b.HasIndex("tManufacturerkManufacturerId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tProductAttributeMapping", b =>
                {
                    b.Property<int>("kProductAttributeMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kProductAttributeMappingId"));

                    b.Property<int?>("iValuteType")
                        .HasColumnType("integer");

                    b.Property<int?>("kAttributeValueId")
                        .HasColumnType("integer");

                    b.Property<int?>("kProductId")
                        .HasColumnType("integer");

                    b.HasKey("kProductAttributeMappingId");

                    b.HasIndex("kAttributeValueId");

                    b.ToTable("ProductAttributeMappings");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tProductCategory", b =>
                {
                    b.Property<int>("kProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kProductCategoryId"));

                    b.Property<int?>("kOdooReference")
                        .HasColumnType("integer");

                    b.Property<int?>("kUpperCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("sName")
                        .HasColumnType("text");

                    b.HasKey("kProductCategoryId");

                    b.HasIndex("kUpperCategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tProductDescription", b =>
                {
                    b.Property<int>("kProductDescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kProductDescriptionId"));

                    b.Property<int?>("kLanguageId")
                        .HasColumnType("integer");

                    b.Property<int?>("kProductId")
                        .HasColumnType("integer");

                    b.Property<string>("sDescription")
                        .HasColumnType("text");

                    b.Property<string>("sShortDescription")
                        .HasColumnType("text");

                    b.Property<int?>("tLanguagekLanguageId")
                        .HasColumnType("integer");

                    b.HasKey("kProductDescriptionId");

                    b.HasIndex("kLanguageId");

                    b.HasIndex("tLanguagekLanguageId");

                    b.ToTable("ProductDescriptions");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tProductImage", b =>
                {
                    b.Property<int>("kProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kProductImageId"));

                    b.Property<int?>("iNumber")
                        .HasColumnType("integer");

                    b.Property<string>("sImage")
                        .HasColumnType("text");

                    b.HasKey("kProductImageId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tProductImageMapping", b =>
                {
                    b.Property<int>("kProductImageMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kProductImageMappingId"));

                    b.Property<int?>("TProductkProductId")
                        .HasColumnType("integer");

                    b.Property<int?>("kProductId")
                        .HasColumnType("integer");

                    b.Property<int?>("kProductImageId")
                        .HasColumnType("integer");

                    b.Property<int?>("tProductImagekProductImageId")
                        .HasColumnType("integer");

                    b.HasKey("kProductImageMappingId");

                    b.HasIndex("TProductkProductId");

                    b.HasIndex("kProductId");

                    b.HasIndex("tProductImagekProductImageId");

                    b.ToTable("ProductImageMappings");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tProductStock", b =>
                {
                    b.Property<int>("kProductStockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kProductStockId"));

                    b.Property<int?>("iStockAvailable")
                        .HasColumnType("integer");

                    b.Property<int?>("iStockInDelivery")
                        .HasColumnType("integer");

                    b.Property<int?>("iStockInOrders")
                        .HasColumnType("integer");

                    b.Property<int?>("kOdooReference")
                        .HasColumnType("integer");

                    b.Property<int>("kProductVariantId")
                        .HasColumnType("integer");

                    b.Property<int?>("kWarehouseId")
                        .HasColumnType("integer");

                    b.HasKey("kProductStockId");

                    b.HasIndex("kProductVariantId");

                    b.ToTable("ProductStocks");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<double?>("Length")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("OdooId")
                        .HasColumnType("integer");

                    b.Property<double?>("PackedLength")
                        .HasColumnType("double precision");

                    b.Property<double?>("PackedWeight")
                        .HasColumnType("double precision");

                    b.Property<double?>("PackedWidth")
                        .HasColumnType("double precision");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Product_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("SKU")
                        .HasColumnType("text");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.Property<double?>("Width")
                        .HasColumnType("double precision");

                    b.Property<int?>("tProductkProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Product_Id");

                    b.HasIndex("tProductkProductId");

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tResponsiblePersonGPSR", b =>
                {
                    b.Property<int>("kResponsiblePersonGPSRId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kResponsiblePersonGPSRId"));

                    b.Property<string>("sAdressAddition")
                        .HasColumnType("text");

                    b.Property<string>("sCity")
                        .HasColumnType("text");

                    b.Property<string>("sCompanyName")
                        .HasColumnType("text");

                    b.Property<string>("sCompanyNameAddition")
                        .HasColumnType("text");

                    b.Property<string>("sCountry")
                        .HasColumnType("text");

                    b.Property<string>("sEmailAddress")
                        .HasColumnType("text");

                    b.Property<string>("sFaxnumber")
                        .HasColumnType("text");

                    b.Property<string>("sForename")
                        .HasColumnType("text");

                    b.Property<string>("sHousenumber")
                        .HasColumnType("text");

                    b.Property<string>("sMobilephonenumber")
                        .HasColumnType("text");

                    b.Property<string>("sPhonenumber")
                        .HasColumnType("text");

                    b.Property<string>("sSalutation")
                        .HasColumnType("text");

                    b.Property<string>("sState")
                        .HasColumnType("text");

                    b.Property<string>("sStreet")
                        .HasColumnType("text");

                    b.Property<string>("sSurename")
                        .HasColumnType("text");

                    b.Property<string>("sTitle")
                        .HasColumnType("text");

                    b.Property<string>("sWebsite")
                        .HasColumnType("text");

                    b.Property<string>("sZipCode")
                        .HasColumnType("text");

                    b.HasKey("kResponsiblePersonGPSRId");

                    b.ToTable("ResponsiblePersonGPSRs");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tSalesChannelProductMapping", b =>
                {
                    b.Property<int>("kSalesChannelProductMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kSalesChannelProductMappingId"));

                    b.Property<bool?>("bEnabled")
                        .HasColumnType("boolean");

                    b.Property<double?>("dSurchargeAmount")
                        .HasColumnType("double precision");

                    b.Property<int?>("iSurchargeType")
                        .HasColumnType("integer");

                    b.Property<int?>("kMarketplaceId")
                        .HasColumnType("integer");

                    b.HasKey("kSalesChannelProductMappingId");

                    b.ToTable("SalesChannelProductMappings");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tShippingMethod", b =>
                {
                    b.Property<int>("kShippingMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kShippingMethodId"));

                    b.Property<double?>("dPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("sName")
                        .HasColumnType("text");

                    b.HasKey("kShippingMethodId");

                    b.ToTable("ShippingMethods");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tShippingPackage", b =>
                {
                    b.Property<int>("kShippingPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kShippingPackageId"));

                    b.Property<DateTime?>("dCreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("dPackageWeight")
                        .HasColumnType("double precision");

                    b.Property<int?>("kOrderId")
                        .HasColumnType("integer");

                    b.Property<int?>("kShippingMethodId")
                        .HasColumnType("integer");

                    b.Property<string>("sTrackingNumber")
                        .HasColumnType("text");

                    b.Property<int?>("tOrderkOrderId")
                        .HasColumnType("integer");

                    b.Property<int?>("tShippingMethodkShippingMethodId")
                        .HasColumnType("integer");

                    b.HasKey("kShippingPackageId");

                    b.HasIndex("kOrderId");

                    b.HasIndex("kShippingMethodId");

                    b.HasIndex("tOrderkOrderId");

                    b.HasIndex("tShippingMethodkShippingMethodId");

                    b.ToTable("ShippingPackages");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tShopifyAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("ApiToken")
                        .HasColumnType("text");

                    b.Property<int>("MarketplaceTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("StoreName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MarketplaceTypeId");

                    b.ToTable("ShopAccounts");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tSupplier", b =>
                {
                    b.Property<int>("kSupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kSupplierId"));

                    b.Property<double?>("dSupplierPrice")
                        .HasColumnType("double precision");

                    b.Property<int?>("iMinPurchaseQuantity")
                        .HasColumnType("integer");

                    b.Property<int?>("iSupplierStock")
                        .HasColumnType("integer");

                    b.Property<int?>("kOdooReference")
                        .HasColumnType("integer");

                    b.Property<string>("sName")
                        .HasColumnType("text");

                    b.HasKey("kSupplierId");

                    b.ToTable("tSuppliers");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tVariant_Attribute", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("AttributeValueId")
                        .HasColumnType("integer");

                    b.Property<int?>("tAttributeValuekAttributeValueId")
                        .HasColumnType("integer");

                    b.Property<int?>("tProductVariantId")
                        .HasColumnType("integer");

                    b.Property<int>("variant_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("AttributeValueId");

                    b.HasIndex("tAttributeValuekAttributeValueId");

                    b.HasIndex("tProductVariantId");

                    b.HasIndex("variant_id");

                    b.ToTable("tVariantAttributes");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tVatType", b =>
                {
                    b.Property<int>("kVatType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("kVatType"));

                    b.Property<double?>("dAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("sVatName")
                        .HasColumnType("text");

                    b.HasKey("kVatType");

                    b.ToTable("tVatTypes");
                });

            modelBuilder.Entity("Domain.Entities.Data.tVariantMarketplace", b =>
                {
                    b.Property<int>("ProductVariantId")
                        .HasColumnType("integer");

                    b.Property<int>("MarketplaceTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("MarketPlaceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProductVariantId", "MarketplaceTypeId");

                    b.HasIndex("MarketplaceTypeId");

                    b.ToTable("tVariantMarketplaces");
                });

            modelBuilder.Entity("Domain.Entities.Identity.CustomUserIdentity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CustomUserIdentity");
                });

            modelBuilder.Entity("Domain.Entities.Identity.TenantInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("TenantInfo");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tAmazonAccount", b =>
                {
                    b.HasOne("CoreSystem.DAL.Context.Models.tMarketplaceType", "MarketPlaceType")
                        .WithMany("tAmazonAccounts")
                        .HasForeignKey("MarketPlaceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MarketPlaceType");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tAttributeValue", b =>
                {
                    b.HasOne("CoreSystem.DAL.Context.Models.tAttribute", "kAttribue")
                        .WithMany()
                        .HasForeignKey("kAttribueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreSystem.DAL.Context.Models.tAttribute", null)
                        .WithMany("tAttributeValues")
                        .HasForeignKey("tAttributekAttributeId");

                    b.Navigation("kAttribue");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tCustomer", b =>
                {
                    b.HasOne("CoreSystem.DAL.Context.Models.tCustomerGroup", "kCustomerGroup")
                        .WithMany("tCustomers")
                        .HasForeignKey("kCustomerGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("kCustomerGroup");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tCustomerAddress", b =>
                {
                    b.HasOne("CoreSystem.DAL.Context.Models.tCustomer", "kCustomer")
                        .WithMany("tCustomerAddresses")
                        .HasForeignKey("kCustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("kCustomer");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tEbayAccount", b =>
                {
                    b.HasOne("CoreSystem.DAL.Context.Models.tMarketplaceType", "MarketplaceType")
                        .WithMany("tEbayAccounts")
                        .HasForeignKey("MarketplaceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MarketplaceType");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tKauflandAccount", b =>
                {
                    b.HasOne("CoreSystem.DAL.Context.Models.tMarketplaceType", "MarketPlaceType")
                        .WithMany("tKauflandAccounts")
                        .HasForeignKey("MarketPlaceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MarketPlaceType");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tLogEntry", b =>
                {
                    b.HasOne("CoreSystem.DAL.Context.Models.tLogLevel", "kLogLevel")
                        .WithOne()
                        .HasForeignKey("CoreSystem.DAL.Context.Models.tLogEntry", "kLogLevelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("CoreSystem.DAL.Context.Models.tLogType", "kLogType")
                        .WithOne()
                        .HasForeignKey("CoreSystem.DAL.Context.Models.tLogEntry", "kLogTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("kLogLevel");

                    b.Navigation("kLogType");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tOdooAccount", b =>
                {
                    b.HasOne("CoreSystem.DAL.Context.Models.tMarketplaceType", "kMarketplaceType")
                        .WithMany("tOdooAccounts")
                        .HasForeignKey("kMarketplaceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("kMarketplaceType");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tOrder", b =>
                {
                    b.HasOne("CoreSystem.DAL.Context.Models.tCustomer", "kCustomer")
                        .WithMany("tOrders")
                        .HasForeignKey("kCustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreSystem.DAL.Context.Models.tCustomerAddress", "kOrderAddress")
                        .WithMany("tOrders")
                        .HasForeignKey("kOrderAddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CoreSystem.DAL.Context.Models.tPaymentMethod", "kPaymentMethod")
                        .WithMany("tOrders")
                        .HasForeignKey("kPaymentMethodId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("kCustomer");

                    b.Navigation("kOrderAddress");

                    b.Navigation("kPaymentMethod");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tOrderPosition", b =>
                {
                    b.HasOne("CoreSystem.DAL.Context.Models.tOrder", "kOrder")
                        .WithMany()
                        .HasForeignKey("kOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreSystem.DAL.Context.Models.tProductVariant", "kVariant")
                        .WithMany("tOrderPositions")
                        .HasForeignKey("kVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreSystem.DAL.Context.Models.tOrder", null)
                        .WithMany("tOrderPositions")
                        .HasForeignKey("tOrderkOrderId");

                    b.Navigation("kOrder");

                    b.Navigation("kVariant");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tOttoAccount", b =>
                {
                    b.HasOne("CoreSystem.DAL.Context.Models.tMarketplaceType", "kMarketplace")
                        .WithMany()
                        .HasForeignKey("kMarketplaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreSystem.DAL.Context.Models.tMarketplaceType", null)
                        .WithMany("tOttoAccounts")
                        .HasForeignKey("tMarketplaceTypekMarketplaceType");

                    b.Navigation("kMarketplace");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tProduct", b =>
                {
                    b.HasOne("CoreSystem.DAL.Context.Models.tProductCategory", "Category")
                        .WithMany("tProducts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CoreSystem.DAL.Context.Models.tCondition", "kCondition")
                        .WithMany()
                        .HasForeignKey("kConditionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CoreSystem.DAL.Context.Models.tManufacturer", "kManufacturer")
                        .WithMany()
                        .HasForeignKey("kManufacturerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CoreSystem.DAL.Context.Models.tResponsiblePersonGPSR", "kResponsiblePersonGPSR")
                        .WithMany("tProducts")
                        .HasForeignKey("kResponsiblePersonGPSRId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CoreSystem.DAL.Context.Models.tSalesChannelProductMapping", "kSalesChannelProductMapping")
                        .WithMany("tProducts")
                        .HasForeignKey("kSalesChannelProductMappingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CoreSystem.DAL.Context.Models.tSupplier", "kSupplier")
                        .WithMany("tProducts")
                        .HasForeignKey("kSupplierId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CoreSystem.DAL.Context.Models.tVatType", "kVatTypeNavigation")
                        .WithMany("tProducts")
                        .HasForeignKey("kVatTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CoreSystem.DAL.Context.Models.tCondition", null)
                        .WithMany("tProducts")
                        .HasForeignKey("tConditionkConditionId");

                    b.HasOne("CoreSystem.DAL.Context.Models.tManufacturer", null)
                        .WithMany("tProducts")
                        .HasForeignKey("tManufacturerkManufacturerId");

                    b.Navigation("Category");

                    b.Navigation("kCondition");

                    b.Navigation("kManufacturer");

                    b.Navigation("kResponsiblePersonGPSR");

                    b.Navigation("kSalesChannelProductMapping");

                    b.Navigation("kSupplier");

                    b.Navigation("kVatTypeNavigation");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tProductAttributeMapping", b =>
                {
                    b.HasOne("CoreSystem.DAL.Context.Models.tAttributeValue", "tAttributeValue")
                        .WithMany()
                        .HasForeignKey("kAttributeValueId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CoreSystem.DAL.Context.Models.tProduct", "tProduct")
                        .WithMany("AttributeMappings")
                        .HasForeignKey("kAttributeValueId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("tAttributeValue");

                    b.Navigation("tProduct");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tProductCategory", b =>
                {
                    b.HasOne("CoreSystem.DAL.Context.Models.tProductCategory", "kUpperCategory")
                        .WithMany("InversekUpperCategory")
                        .HasForeignKey("kUpperCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("kUpperCategory");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tProductDescription", b =>
                {
                    b.HasOne("CoreSystem.DAL.Context.Models.tLanguage", "kLanguage")
                        .WithMany()
                        .HasForeignKey("kLanguageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CoreSystem.DAL.Context.Models.tLanguage", null)
                        .WithMany("tProductDescriptions")
                        .HasForeignKey("tLanguagekLanguageId");

                    b.Navigation("kLanguage");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tProductImageMapping", b =>
                {
                    b.HasOne("CoreSystem.DAL.Context.Models.tProduct", "TProduct")
                        .WithMany()
                        .HasForeignKey("TProductkProductId");

                    b.HasOne("CoreSystem.DAL.Context.Models.tProductImage", "kProductImage")
                        .WithMany()
                        .HasForeignKey("kProductId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CoreSystem.DAL.Context.Models.tProductImage", null)
                        .WithMany("tProductImageMappings")
                        .HasForeignKey("tProductImagekProductImageId");

                    b.Navigation("TProduct");

                    b.Navigation("kProductImage");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tProductStock", b =>
                {
                    b.HasOne("CoreSystem.DAL.Context.Models.tProductVariant", "kProductVariant")
                        .WithMany("tProductStocks")
                        .HasForeignKey("kProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("kProductVariant");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tProductVariant", b =>
                {
                    b.HasOne("CoreSystem.DAL.Context.Models.tProduct", "Product")
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreSystem.DAL.Context.Models.tProduct", null)
                        .WithMany("tProductVariants")
                        .HasForeignKey("tProductkProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tShippingPackage", b =>
                {
                    b.HasOne("CoreSystem.DAL.Context.Models.tOrder", "kOrder")
                        .WithMany()
                        .HasForeignKey("kOrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CoreSystem.DAL.Context.Models.tShippingMethod", "kShippingMethod")
                        .WithMany()
                        .HasForeignKey("kShippingMethodId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CoreSystem.DAL.Context.Models.tOrder", null)
                        .WithMany("tShippingPackages")
                        .HasForeignKey("tOrderkOrderId");

                    b.HasOne("CoreSystem.DAL.Context.Models.tShippingMethod", null)
                        .WithMany("tShippingPackages")
                        .HasForeignKey("tShippingMethodkShippingMethodId");

                    b.Navigation("kOrder");

                    b.Navigation("kShippingMethod");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tShopifyAccount", b =>
                {
                    b.HasOne("CoreSystem.DAL.Context.Models.tMarketplaceType", "MarketplaceType")
                        .WithMany("tShopifyAccounts")
                        .HasForeignKey("MarketplaceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MarketplaceType");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tVariant_Attribute", b =>
                {
                    b.HasOne("CoreSystem.DAL.Context.Models.tAttributeValue", "AttributeValue")
                        .WithMany()
                        .HasForeignKey("AttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreSystem.DAL.Context.Models.tAttributeValue", null)
                        .WithMany("tVariant_Attributes")
                        .HasForeignKey("tAttributeValuekAttributeValueId");

                    b.HasOne("CoreSystem.DAL.Context.Models.tProductVariant", null)
                        .WithMany("tVariant_Attributes")
                        .HasForeignKey("tProductVariantId");

                    b.HasOne("CoreSystem.DAL.Context.Models.tProductVariant", "variant")
                        .WithMany()
                        .HasForeignKey("variant_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AttributeValue");

                    b.Navigation("variant");
                });

            modelBuilder.Entity("Domain.Entities.Data.tVariantMarketplace", b =>
                {
                    b.HasOne("CoreSystem.DAL.Context.Models.tMarketplaceType", "MarketplaceType")
                        .WithMany("VariantMarketplaces")
                        .HasForeignKey("MarketplaceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreSystem.DAL.Context.Models.tProductVariant", "ProductVariant")
                        .WithMany("VariantMarketplaces")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MarketplaceType");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("Domain.Entities.Identity.TenantInfo", b =>
                {
                    b.HasOne("Domain.Entities.Identity.CustomUserIdentity", "UserIdentity")
                        .WithOne("TenantInfo")
                        .HasForeignKey("Domain.Entities.Identity.TenantInfo", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserIdentity");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tAttribute", b =>
                {
                    b.Navigation("tAttributeValues");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tAttributeValue", b =>
                {
                    b.Navigation("tVariant_Attributes");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tCondition", b =>
                {
                    b.Navigation("tProducts");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tCustomer", b =>
                {
                    b.Navigation("tCustomerAddresses");

                    b.Navigation("tOrders");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tCustomerAddress", b =>
                {
                    b.Navigation("tOrders");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tCustomerGroup", b =>
                {
                    b.Navigation("tCustomers");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tLanguage", b =>
                {
                    b.Navigation("tProductDescriptions");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tManufacturer", b =>
                {
                    b.Navigation("tProducts");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tMarketplaceType", b =>
                {
                    b.Navigation("VariantMarketplaces");

                    b.Navigation("tAmazonAccounts");

                    b.Navigation("tEbayAccounts");

                    b.Navigation("tKauflandAccounts");

                    b.Navigation("tOdooAccounts");

                    b.Navigation("tOttoAccounts");

                    b.Navigation("tShopifyAccounts");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tOrder", b =>
                {
                    b.Navigation("tOrderPositions");

                    b.Navigation("tShippingPackages");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tPaymentMethod", b =>
                {
                    b.Navigation("tOrders");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tProduct", b =>
                {
                    b.Navigation("AttributeMappings");

                    b.Navigation("tProductVariants");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tProductCategory", b =>
                {
                    b.Navigation("InversekUpperCategory");

                    b.Navigation("tProducts");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tProductImage", b =>
                {
                    b.Navigation("tProductImageMappings");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tProductVariant", b =>
                {
                    b.Navigation("VariantMarketplaces");

                    b.Navigation("tOrderPositions");

                    b.Navigation("tProductStocks");

                    b.Navigation("tVariant_Attributes");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tResponsiblePersonGPSR", b =>
                {
                    b.Navigation("tProducts");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tSalesChannelProductMapping", b =>
                {
                    b.Navigation("tProducts");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tShippingMethod", b =>
                {
                    b.Navigation("tShippingPackages");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tSupplier", b =>
                {
                    b.Navigation("tProducts");
                });

            modelBuilder.Entity("CoreSystem.DAL.Context.Models.tVatType", b =>
                {
                    b.Navigation("tProducts");
                });

            modelBuilder.Entity("Domain.Entities.Identity.CustomUserIdentity", b =>
                {
                    b.Navigation("TenantInfo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
